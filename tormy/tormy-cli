#!/usr/bin/env python3

import scrapy
import argparse
import json
import requests
import subprocess
from requests.auth import HTTPDigestAuth

from tormy.spiders import tormy_spider
from scrapy.crawler import CrawlerProcess
from collections import defaultdict


# Colors for text on stdout
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class Results:
    # URL shortener for magnet links
    # Currently the "mgnet.me" magnet link shortener is used to shorten links.
    def shorten_magnet_uri(magnet_uri):
        base_url = "http://mgnet.me/api/create?m="
        request_url = base_url + magnet_uri

        shortner_response = requests.get(request_url)
        if(shortner_response.ok):
            resultJSON = json.loads(shortner_response.content)
            shorturl = resultJSON['shorturl']
            return shorturl
        else:
            myResponse.raise_for_status()


    def process_results():
        # If the results.jl file contains content, it implies that the search has yielded relevant results and it will be processed.
        try:
            with open('results.jl', 'r') as results:
                json_results = json.load(results)
                list_of_results = []

                # Iterate over all the results in the JSON file.
                for i in range(len(json_results['name'])):
                    title = json_results['name'][i]
                    details = json_results['info'][i]
                    total_seeders = json_results['seeders'][i]
                    total_leechers = json_results['leechers'][i]
                    magnet_uri = json_results['magnet'][i]
                    short_magnet_uri = Results.shorten_magnet_uri(magnet_uri)

                    # Store the current result in a dictionary.
                    current_result = {
                        'title': title,
                        'details': details,
                        'total_seeders': total_seeders,
                        'total_leechers': total_leechers,
                        'magnet_uri': magnet_uri,
                        'short_magnet_uri': short_magnet_uri,
                    }

                    # Add the current result to the list of results.
                    list_of_results.append(current_result)

            return list_of_results

        # If the results.jl file is empty, it implies that the search did not yield any result and thus cannot be processed.
        except:
            print(Colors.FAIL + "No results! Try different keywords." + Colors.ENDC)

    
    def output_results(processed_result):
        for index, result in enumerate(processed_result):
            title = result['title']
            details = result['details']
            total_seeders = result['total_seeders']
            total_leechers = result['total_leechers']
            magnet_uri = result['magnet_uri']
            short_magnet_uri = result['short_magnet_uri']

            print("\n" + "[" + str(index + 1) + "]" + Colors.OKGREEN + " {}".format(title) + Colors.ENDC)
            print("     " + Colors.HEADER + "{}".format(details) + Colors.ENDC)
            print("     " + Colors.OKGREEN + "Seeders(" + u'\u2191' + "): " + "{}".format(total_seeders) + Colors.ENDC,Colors.FAIL + "Leechers(" + u'\u2193' + "): "  + "{}".format(total_leechers) + Colors.ENDC)
            print("     " + "Magnet Link: " + Colors.OKBLUE + Colors.UNDERLINE + "{}".format(short_magnet_uri) + Colors.ENDC)


    def download_result(selected_torrent, processed_result):
        # List(Array) index is used here to provide unique ID to torrent results, this way user can input torrent number to select a torrent.(Since list index starts from '0' offset of '1' is used to access torrents from the list.)
        torrent_to_download_name = processed_result[int(selected_torrent) - 1]['title']
        torrent_to_download_url = processed_result[int(selected_torrent) - 1]['magnet_uri']
        
        print("\nOpening your torrent client to download the following torrent - ")
        print("\n" + "[{}]".format(selected_torrent) + Colors.OKGREEN + " {}".format(torrent_to_download_name) + Colors.ENDC + "\n")

        # Try opening the torrent using the 'default' torrent client.
        open_status_code = subprocess.call(["open", torrent_to_download_url])
        
        # If opening the torrent returns a non-zero code, it implies that there was an error.
        if open_status_code != 0:
            print("\n" + Colors.FAIL + "Error opening your torrent. Install a torrent client and try again." + Colors.ENDC +"\n")

# The condition in this 'if' statement implies that this script was executed directly and not by importing into another script.
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Search for torrents through the terminal.')
    parser.add_argument('query', action='store', type=str, help='Enter text within quotes to search for torrents.\nExample = tormy-cli \"the matrix\"')
    args = vars(parser.parse_args())
    input_query = args['query']

    process = CrawlerProcess({
        'USER_AGENT': 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)'
    })

    my_spider = tormy_spider.TorrentSpider()

    # Pass the qurery input by the user into the Spider.
    process.crawl(my_spider, input_query)
    process.start()

    # After the Spider is finished crawling and the pipeline is done processing, process the results.
    processed_result = Results.process_results()

    # Pass the processed result for output.
    Results.output_results(processed_result)
    
    while True:
        # Get input to select a torrent.
        selected_torrent = input("\nSelect a torrent: ")
        
        # Check if the input is a number, and within the range of list of torrents available for download.
        if (selected_torrent.isnumeric()) and (int(selected_torrent) > 0) and (int(selected_torrent) <= len(processed_result)):
            # Download the selected torrent from the processed => outputted result.
            Results.download_result(selected_torrent, processed_result)
            break
        else:
            print("\nError! Enter a valid input.")